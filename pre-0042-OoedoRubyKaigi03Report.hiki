!RegionalRubyKaigi レポート (??) 大江戸 Ruby 会議 03
:開催日:2013-03-16(土) 10:00 - 17:50
:開催場所:[[深川江戸資料館|http://www.kcf.or.jp/fukagawa/]]小劇場
:主催:[[Asakusa.rb|http://asakusa.rubyist.net/]]
:参加者:およそ 200 名
:資料:[[公式ページ|http://regional.rubykaigi.org/oedo03]]
:公式タグ:[[odrk03|http://b.hatena.ne.jp/search/tag?q=odrk03&users=1]]
:公式ハッシュタグ:[[#odrk03|http://twitter.com/search?q=%23odrk03]]

! はじめに

2013 年 3 月 16 日に、地域 Ruby の会のひとつである Asakusa.rb の 200 回目の meetup を記念して「大江戸 Ruby 会議 03」が開催されましたので、本記事にてレポートをお送りします。

前回の「[[大江戸 Ruby 会議 01|0034-OoedoRubyKaigi01Report]]」から約 2 年が経っていますが、その間に欠番となる「[[大江戸 Ruby 会議 02|0039-MetPragdaveAtAsakusarb#l7]]」を挟んでいますので、おおむね 1 年に一度と順調に開催を重ねている地域 Ruby 会議のひとつと言えるのではないでしょうか。

! 招待講演 『A Rubyist life in London』
!! @makoto_inoue
!!! 『A Rubyist life in London』

ロンドン在住の @makoto_inoue さんが、ロンドンでの暮らしと NewBamboo でどのように働いているか、
海外から見た日本人と Rubyist の姿について話しました。
また、絵を学んでいるということで、スライドにもご自身で書かれた絵が多く登場する楽しげな資料でした。

ロンドンのVisaの紹介から始まり、ご自身の仕事やコミュニティ活動歴を話しました。
2008年には、New Bamboo に入社し、2010年には Pusher という非同期処理ライブラリを手がけていました。
2011年には、 sinsai.info のプロジェクトに携わりました。
社歴は、外資系の企業ばかりでした。

ロンドンでの Ruby コミュニティ LRUG(London Ruby User Group)http://lrug.org/
を紹介しました。skillsmatter.comというトレーニング会社がビデオを撮影していて、xxxで見ることができます。

会社の紹介をしました。NewBamboo という会社で受託ビジネスをしています。
以前、Pusher という非同期処理ライブラリを作っていました。自分たちが必要と思うツールについては
自分たちで作ってしまう会社だと紹介しました。
社内で使っている、 Mandays というツールを紹介しました。誰がどのプロジェクトにアサインされているかを可視化するツールです。
もちろん、誰がプロジェクトにアサインされていないかも可視化されます。
NewBamboo では インフラエンジニアが Batman と呼ばれているようで、

なりたくないエンジニア像として、elastic (揮発的な)エンジニアを挙げました。
一ヶ月だけ案件の手伝いに行くなど

Rubyist and Japanese
Rubyistが他の言語とは違ってユニークなのは日本語リソースが多いこと。海外に向けて翻訳できることだと言いました。
Rubyistはとても英語ができる。特に文法に明るい。しかし、長文を書くスタミナがないようです。と海外から日本のRubyistについて思うところを述べました。
@makoto_inoue さんと同じようにロンドンで働く @ono さんは、「僕の知っている範囲では、欧米のRubyistで英語の正確性を気にする人はそんなにいないです。
ほとんどの人は、Google Translate よりも良い情報が手に入ればとてもうれしいと思っているぐらいなので、そんなに気にする必要はないと思います。」
と、日本のRubyistが英語に対して持っているためらいを払拭してくれる言葉を紹介しました。

! Ninja Talks 『気づいたらここに立っていた(仮)』

@takkanm さんが Asakusa.rb に参加する以前の話と、Asakusa.rb に参加してからどのように自分が変わったか、というお話でした。Asakusa.rb に参加する以前は「自分のためにコードを書く」という意識であったところが、 Asakusa.rb に参加して「オープンソースを直すというのがあたりまえ」という人たちを目の当たりにすることで、「積極的にオープンソースに貢献していこう」という意識に変わったとのことでした。また「特別な力がなくてもオープンソースに貢献できる」ことを強調され、使ってるツールに不満があったら自分の出来る範囲でバグ修正やバグ報告をしましょう、とおっしゃっていました。

! Ninja Talks 『asakusa.rbに一年間通ったらこうなった』

@katsyoshi さんによる mikutter という Ruby で書かれた Twitter クライアントに関するお話でした。mikutter の動かし方から mikutter のプラグインの説明、mikutter で利用しているログ収集ツール fluentd の説明、また fluentd の安定版である td-agent を ARM アーキテクチャで動作させた話など、「普段の Asakusa.rb で @katsyoshi さんが黙々とやっていること」を存分に公開していただきました。

! Ninja Talks 『某レシピ共有サイトの Ruby 1.9 対応で大変苦労しました』

@mrkn さんによる、今まで Ruby 1.8 上で動作していた某レシピ共有サイトを Ruby 1.9 上で動作させるために色々と苦労されたお話でした。中でも「バグを前提として書かれていたコードが、Ruby のバージョンが上がることで問題になる」という話や、「良くない書き方をすると警告を出すようにして、開発者に自発的に直すようにしてもらう」といった工夫の話など、いかにして Ruby 1.8 から Ruby 1.9 への非互換性を「組織として」乗り越えて行ったかを実装面と運用面から具体的な体験談とともに解説されていたのが印象的でした。

! 基調講演 『Ruby の GC の問題点と改善手法についての一考察』

設立初期からの Asakusa.rb メンバーで、Ruby コミッタの ささだこういち (@koichisasada) さんによる基調講演があり、Ruby のGCについて、これまで改善してきた事とこれからの展望について、分かりやすく発表してくれました。ささださんは、現在 Heroku でフルタイムコミッタとして活躍しており、最近は ==ワンダと巨像== GC の改善に注力しているとのことです。

まず、Ruby 2.0 になって、Ruby の GC はどう変わったのか、という話がありました。大きな変更は Copy On Write (以下 CoW) に対する親和性が上がった事です。Copy On Write とはプロセスのフォークによってメモリの状態を複製する際に、実際にメモリに割り当てられている値が変化していない場合は元のメモリ領域を参照し、変更があった時点でその部分だけを複製する処理の事です。これによりメモリの使用量を節約することができます。これは後述する Bitmap Marking という仕組みにより実現されています。

Ruby の GC は基本的には Mark&Sweep 方式で実装されており、オブジェクトを mark して辿れなかったものを sweep して回収する仕組みになっています。1.9.3 がリリースされた時に、GC で長い時間処理が停止してしまうのを避けるために、lazy sweep という仕組みが導入されました。これは、GC のタイミングを遅らせて段階的に処理する事で、一度のストップタイムを短くする事が狙い、とのことです。一方で、メモリの開放が遅くなったり、キャッシュのローカリティが動作速度に影響を及ぼすかもしれない、というデメリットについても説明してくれました。

また、Ruby の GC は保守的 GC で、ポインタっぽく見える値はとりあえずオブジェクトのポインタとして扱う、という仕組みになっているという話がありました。保守的 GC は C 言語で Ruby を拡張する際に、親和性が高いというメリットがあるため、こういう実装になっているようです。

そして、今回 Ruby 2.0 で実装された Bitmap Marking の概要についての説明がありました。Bitmap Marking では GC のための Mark bit を管理する Bitmap 領域を用意し、Mark をそこでまとめて扱うようになりました。従来のマーキング処理では、オブジェクトのメモリ領域自体に Mark bit をセットしていました。そうすると Rubyが内部で保持している RVALUE という構造体の値が変化してしまいます。これでは、GC のためのマーキング処理が行われる度にメモリの値が書き変わってしまい、CoW に向かない動作になってしまいます。そのため、Ruby 2.0 ではBitmap Marking を導入し、GC のマーキング処理が行われても、オブジェクトのメモリに変化が発生しないように改善されました。もちろんメリットだけではなく、Mark bit を探索するためには Bitmap 領域を経由する必要が出てくるため、GC の動作自体が若干遅くなる可能性もある、という話もありました。

最後に Ruby の GC には現状どういう問題があるのか、そして今後どうしていこうと考えているかについて、語ってくれました。今の Ruby の GC は余り効率が良くないことや、メモリコンパクションが無いこと等が大きな問題だと考えているとのことです。元々は C 言語での実装や拡張に対して親和性を高くするためにやっていた事が、今効率性を高めていくためには負債になってしまっている、という要因もあります。ですが、今後の改善案として、世代別 GC を実現して効率を高めたいと考えているそうなので、次のメジャーバージョンアップでは、更に効率良い GC が実現されているかもしれません。

資料には、もう一つ 2.0 で実装されたマーキング処理の非再帰処理化についても書かれていましたが、発表時間の都合で、今回は話を聞くことができませんでした。興味がある方は、是非発表資料の方も参照してみてください。


! Ninja Talks 『RubyConfのNinjaの話の続きのおはなし』

@yuri_at_earth さんによる、mruby を使った組み込み開発入門のお話でした。組み込み開発は「プログラミングを書いて何かする」状態にするまでの環境整備がとても大変なので、挫折してしまう人が多いとのことです。そこで STM32F4-Discovery という安価な組み込み評価キットをターゲットにして、mruby で組み込み開発をできるようにするまでの手順を整備して、組み込み開発にたどりつくまでの敷居を下げる取り組みをされているとのことでした。

! Ninja Talks 『Travis-ciでのemberjsのi18n』

@morgan_randy さんによる、JavaScript の MVC フレームワークである Ember.js を多言語に対応させるお話でした。Ember.js は JavaScript を利用した静的なサイトを作成するのに利用され、Travis CI の Web クライアントとしても利用されています。@morgan_randy さんは rake-pipeline-i18n-filter と localeapp-handlebars_i18n を利用して多言語用 YAML を JSON に変換して Ember.js による多言語対応の静的なサイトを構築するデモを実施されていました。

! Ninja Talks 『ぼくのかんがえたさいきょうのお問い合わせ管理システム』

@hsbt さんによる、@hsbt さんの勤務先のカスタマーサービス部門が利用している「お問い合わせ管理システム」の問題点を改善したお話でした。既存の「お問い合わせ管理システム」では SQL の LIKE 演算子による「なんちゃって全文検索」であったために動作が遅かったところを、Apache Solr による全文検索エンジンを組み込むことで高速化に成功したとのことでした。また今回実装された「お問い合わせ管理システム」Whispered とその動作環境を構築してくれる構成管理スクリプト whispered-puppet はオープンソースとして GitHub に公開されているそうですので、興味のある方は参照されてはいかがでしょうか。

! 基調講演 『Asakusa.rb vs. the World』
! Ninja Talks 『Diversity is Good. RailsGirls Tokyoの取り組みと、そしてあなたがいつか得られるもの』

@yotii23 さんによる、Rails Girls Tokyo というイベントについてのお話でした。Rails Girls は 2010 年から始まった「女性に Ruby on Rails の技術を伝える」というイベントで、ヨーロッパ、アジア、北米、南米など世界中で開催されているそうです。@yotii23 さんは第二回の Rails Girls Tokyo の主催者でもあり、女性だけでなく今まで技術が届かなかった「普通の人たち」の手に技術を伝えたい、そのために Rails Girls というイベントのフレームワークを活用してほしいとのことでした。 Rails Girls はイベントのマニュアルが GitHub に公開されていますので、同様のイベントを開催したいという方は参考にされてはいかがでしょうか。

! Ninja Talks 『From 0 to 1: How to Get Involved in "Open Source"』
! Ninja Talks 『Rubyを始点としてもう一つのエンタープライズ開発を続けたあるSIerの事例』
! 招待講演 『桐島、Rubyやめるってよ』
! 懇親会
! 写真の提供
! 書いた人たち
!! @gunjisatoshi (Asakusa.rb)
!! @joker1007 (Asakusa.rb)
!! @hokkai7go (Asakusa.rb)
